# PowerShell function to generate the 'tests' portion
function New-TestCase {
    param (
        [Parameter(Mandatory=$true)][string]$Name,
        [Parameter(Mandatory=$true)][string]$Output,
        [double]$Score,
        [double]$MaxScore,
        [string]$Visibility,
        [string]$Status,
        [string]$Number,
        [string[]]$Tags,
        [hashtable]$ExtraData
    )

    # Create a test case object
    $testCase = @{
        name       = $Name
        output     = $Output
        score      = $Score
    }

    if ($MaxScore) { $testCase["max_score"] = $MaxScore }
    if ($Status) { $testCase["status"] = $Status }
    if ($Visibility) { $testCase["visibility"] = $Visibility }
    if ($Number) { $testCase["number"] = $Number }
    if ($Tags) { $testCase["tags"] = $Tags }
    if ($ExtraData) { $testCase["extra_data"] = $ExtraData }

    # Return the test case object
    return $testCase
}

$testsArray = @()

## ** Test 1 - Proper Filename ** 
$submissionFolder = '/autograder/submission/*.ps1'
$submission = get-childitem $submissionFolder

if($null -eq $submission){
    $testsArray += New-TestCase -Name "**FAIL** - No submission" -Output "Your submission did not include a powershell script.  This means it cannot be graded and results in a grade of 0." -Score -50.0 -Status 'failed'
    $results = @{
        score              = 0.0
        #execution_time     = 136
        output             = "Thank you for your submission."
        output_format      = "simple_format"
        test_output_format = "simple_format"
        test_name_format   = "simple_format"
        visibility         = "visible"
        stdout_visibility  = "visible"
        extra_data         = @{}
        tests              = $testsArray
    }
    
    # Convert the results to JSON format
    $jsonData = $results | ConvertTo-Json -Depth 4
    $jsonData | Out-File -Path "/autograder/results/results.json" -Encoding utf8
    return 0
}

if(($submission | Measure-Object).count -gt 1){
    $testsArray += New-TestCase -Name "Count submissions" -Output "Too many files submitted" -Status 'failed'
}else{
    $testsArray += New-TestCase -Name "Count submissions" -Output "Correct amount of files submitted" -Status 'passed' -score 5.0
}

if($submission[0].Name -like "assignment_4.ps1"){
    $testsArray += New-TestCase -Name "Correct Filename" -Output "Your submission contains the correct filename" -Status 'passed' -score 5.0
}else{
    $testsArray += New-TestCase -Name "Incorrect Filename" -Output "Your submission contains the incorrect filename" -Status 'failed'
}

try{
    $testLaunch = . $submission[0].FullName '/autograder/source/data/'
    $testsArray += New-TestCase -Name "Script Execution" -Output "Your submission executed without errors" -Status 'passed' -score 20.0

}catch{
            $testsArray += New-TestCase -Name "**FAIL** - Script Execution" -Output "Your submission did not successfully execute without errors.  This means it cannot be graded and results in a grade of 0." -Score -50.0 -Status 'failed'
            $results = @{
                score              = 0
                #execution_time     = 136
                output             = "Thank you for your submission."
                output_format      = "simple_format"
                test_output_format = "simple_format"
                test_name_format   = "simple_format"
                visibility         = "visible"
                stdout_visibility  = "visible"
                extra_data         = @{}
                tests              = $testsArray
            }
            
            # Convert the results to JSON format
            $jsonData = $results | ConvertTo-Json -Depth 4
            $jsonData | Out-File -Path "/autograder/results/results.json" -Encoding utf8
    
            return 0
}


    $testLaunch_notrail = . $submission[0].FullName '/autograder/source/data'

        if($testLaunch -ne $testLaunch_notrail){
            $testsArray += New-TestCase -Name "Trailing slash test" -Output "Your submission produces different results with or without a trailing slash." -Status 'failed'
        }else{
            $testsArray += New-TestCase -Name "Trailing slash test" -Output "Your submission produces identical results with or without a trailing slash." -Status 'passed' -score 5.0
        }

        


if($null -eq $search_directory){
$testsArray = New-TestCase -Name "Search Directory" -Output "No Search Directory variable detected" -Visibility "visible" -status 'failed'
}else{
    $testsArray = New-TestCase -Name "Search Directory" -Output "Correect Search Directory variable detected" -Visibility "visible" -status 'passed' -score 5.0
}

if($null -eq $email_rows){
$testsArray = New-TestCase -Name "Email Rows" -Output "No email_rows variable detected" -Visibility "visible" -status 'failed'
}else {
    $testsArray = New-TestCase -Name "Email Rows" -Output "Correct email_rows variable detected" -Visibility "visible" -status 'passed' -score 5.0
}

$expectedresult = . ./Find-EmailSolution.ps1 '/autograder/source/data/'

if($testLaunch -ne $expectedresult){
    $testsArray = New-TestCase -Name "Output Mismatch" -Output "Test output: $expectedresult\n\nYour Output: $testLaunch" -Visibility "visible" -status 'failed'
}else{
    $testsArray = New-TestCase -Name "Output Match" -Output "Test output: $expectedresult\n\nYour Output: $testLaunch" -Visibility "visible" -status 'passed' -score 5.0
}
# Combine the test's into an array

# Create the main JSON structure
$results = @{
    #score              = 44.0
    #execution_time     = 136
    output             = "Thank you for your submission."
    output_format      = "simple_format"
    test_output_format = "simple_format"
    test_name_format   = "simple_format"
    visibility         = "visible"
    stdout_visibility  = "visible"
    extra_data         = @{}
    tests              = $testsArray
}

# Convert the results to JSON format
$jsonData = $results | ConvertTo-Json -Depth 4

# Save the JSON data to results.json
$jsonData | Out-File -Path "/autograder/results/results.json" -Encoding utf8
$results